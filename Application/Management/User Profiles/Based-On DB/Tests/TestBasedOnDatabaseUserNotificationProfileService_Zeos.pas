unit TestBasedOnDatabaseUserNotificationProfileService_Zeos;
{

  Delphi DUnit Test Case
  ----------------------
  This unit contains a skeleton test case class generated by the Test Case Wizard.
  Modify the generated code to correctly setup and call the methods from the unit 
  being tested.

}

interface

uses
  TestFramework, QueryExecutor, Classes, SysUtils, DataReader, Session, 
  UserNotificationProfileService, VariantListUnit,
  BasedOnDatabaseUserNotificationProfileService, UserNotificationProfile,
  ZConnection;

type
  // Test methods for class TBasedOnDatabaseUserNotificationProfileService
  
  TestTBasedOnDatabaseUserNotificationProfileService = class(TTestCase)
  strict private

    FConnection: TZConnection;

    FUserNotificationProfileDbSchema: TUserNotificationProfileDbSchema;
    
    FBasedOnDatabaseUserNotificationProfileService:
      TBasedOnDatabaseUserNotificationProfileService;

  private

    procedure CheckUserNotificationProfiles(
      FirstNotificationProfiles, SecondUserNotificationProfiles: TUserNotificationProfile
    );

  private

    procedure RemoveAllForReceivingPermissibleUserIdRecords(
      const UserId: Variant
    ); overload;

    procedure RemoveAllForReceivingPermissibleUserIdRecords; overload;

    procedure AddRandomForReceivingPermissibleUserIdRecords(
      const UserId: Variant
    ); overload;

    procedure AddRandomForReceivingPermissibleUserIdRecords(
      const UserIds: TVariantList
    ); overload;

  private

    procedure GetNotificationProfileForUser_InvalidUserId;
    procedure SaveNotificationProfileForUser_InvalidUserNotificationProfile_Nil;
    procedure SaveNotificationProfileForUser_InvalidUserNotificationProfile_UserIdIsEmpty;

  public

    procedure AfterConstruction; override;
    destructor Destroy; override;

  public

    procedure SetUp; override;
    procedure TearDown; override;

  published

    procedure TestGetNotificationProfilesForUsersAndThoseWhoCanReceiveNotificationsForThem;
    procedure TestGetNotificationProfileForUser_WithoutForReceivingPermissibleUsers;
    procedure TestGetNotificationProfileForUser_WithForReceivingPermissibleUsers;

    procedure TestSaveUserNotificationProfile_AddingForReceivingPermissibleUsers;
    procedure TestSaveUserNotificationProfile_RemovingAllForReceivingPermissibleUsers;

    procedure TestGetNotificationProfileForUser_InvalidUserId;
    procedure TestSaveNotificationProfileForUser_InvalidUserNotificationProfile_Nil;
    procedure TestSaveNotificationProfileForUser_InvalidUserNotificationProfile_UserIdIsEmpty;
    
  end;

implementation

uses

  Variants,
  StrUtils,
  LoginFrm,
  AuxZeosFunctions,
  ConnectionInfo,
  ZQueryExecutor,
  ZConnectionFactory,
  ZeosPostgresTransactionUnit;

procedure TestTBasedOnDatabaseUserNotificationProfileService.AfterConstruction;
begin

  inherited;

  FConnection := TZConnection.Create(nil);

  FConnection.HostName := 'srv-pg2';
  FConnection.Port := 5432;
  FConnection.Database := 'ump_nightly';
  FConnection.User := 'u_59968';
  FConnection.Protocol := 'postgresql';
  FConnection.Password := '123456';

  FConnection.Connect;
  
  FUserNotificationProfileDbSchema := TUserNotificationProfileDbSchema.Create;

  with FUserNotificationProfileDbSchema do begin

    ProfileTableName := 'doc.employees';
    UsersForWhichPermissibleReceivingNotificationsToOthersTableName :=
      'doc.users_for_which_permissible_receiving_notification_to_others';
    ProfileTableUserIdColumnName := 'id';
    ProfileTableReceivingNotificationsEnabledColumnName := 'receiving_notifications_enabled';
    ForOtherUserReceivingUserIdColumnName := 'for_other_receiving_user_id';
    UserIdForWhichReceivingPermissibleColumnName := 'user_id_for_which_receiving_permissible';

  end;

  FBasedOnDatabaseUserNotificationProfileService :=
    TBasedOnDatabaseUserNotificationProfileService.Create(
      FUserNotificationProfileDbSchema,
      TZQueryExecutor.Create(FConnection),
      TZeosPostgresTransaction.Create(FConnection)
    );

end;

destructor TestTBasedOnDatabaseUserNotificationProfileService.Destroy;
begin

  FreeAndNil(FBasedOnDatabaseUserNotificationProfileService);

end;

procedure TestTBasedOnDatabaseUserNotificationProfileService.
  GetNotificationProfileForUser_InvalidUserId;
begin

  FBasedOnDatabaseUserNotificationProfileService.GetNotificationProfileForUser(Null);

end;

procedure TestTBasedOnDatabaseUserNotificationProfileService.
  SaveNotificationProfileForUser_InvalidUserNotificationProfile_Nil;
begin

  FBasedOnDatabaseUserNotificationProfileService.SaveUserNotificationProfile(nil);

end;

procedure TestTBasedOnDatabaseUserNotificationProfileService.
  SaveNotificationProfileForUser_InvalidUserNotificationProfile_UserIdIsEmpty;
var UserNotificationProfile: TUserNotificationProfile;
begin

  UserNotificationProfile := TUserNotificationProfile.Create;

  try

    FBasedOnDatabaseUserNotificationProfileService.SaveUserNotificationProfile(UserNotificationProfile);
    
  finally

    FreeAndNil(UserNotificationProfile);

  end;

end;

procedure TestTBasedOnDatabaseUserNotificationProfileService.SetUp;
begin

  inherited;
  
end;

procedure TestTBasedOnDatabaseUserNotificationProfileService.TearDown;
begin

  inherited;

  RemoveAllForReceivingPermissibleUserIdRecords(1355);

end;

procedure TestTBasedOnDatabaseUserNotificationProfileService.
  TestGetNotificationProfilesForUsersAndThoseWhoCanReceiveNotificationsForThem;
var UserIds: TVariantList;
    Profiles: TUserNotificationProfiles;
    Profile: TUserNotificationProfile;
begin

  RemoveAllForReceivingPermissibleUserIdRecords;
  AddRandomForReceivingPermissibleUserIdRecords(nil);
  
  UserIds := TVariantList.CreateFrom([1355, 1332,1333]);

  try

    Profiles :=
      FBasedOnDatabaseUserNotificationProfileService
        .GetNotificationProfilesForUsersAndThoseWhoCanReceiveNotificationsForThem(
          UserIds
        );

    CheckTrue(Assigned(Profiles), 'Profiles must be assigned');
    CheckEquals(10, Profiles.Count, 'Profile count must be 10');
    CheckTrue(Profiles.IsExistsForUser(1355), 'Profile must be exists for 1355');
    CheckTrue(Profiles.IsExistsForUser(1332), 'Profile must be exists for 1332');
    CheckTrue(Profiles.IsExistsForUser(1333), 'Profile must be exists for 1333');

    Profile := Profiles.FindByUserId(1355);

    CheckEquals(1, Profile.PermissibleReceivingOwnNotificationsUserIds.Count, 'sub count must be 1 for 1355');

    Profile := Profiles.FindByUserId(1332);

    CheckEquals(2, Profile.PermissibleReceivingOwnNotificationsUserIds.Count, 'sub count must be 2 for 1332');

    Profile := Profiles.FindByUserId(1333);

    CheckEquals(3, Profile.PermissibleReceivingOwnNotificationsUserIds.Count, 'sub count must be 3 for 1333');

  finally

    FreeAndNil(UserIds);

  end;

end;

procedure TestTBasedOnDatabaseUserNotificationProfileService.TestGetNotificationProfileForUser_InvalidUserId;
begin

  CheckException(
    GetNotificationProfileForUser_InvalidUserId,
    TUserNotificationProfileServiceException,
    'Invalid UserId must raise exception'
  );

end;

procedure TestTBasedOnDatabaseUserNotificationProfileService.
  TestGetNotificationProfileForUser_WithForReceivingPermissibleUsers;
var
  ReturnValue: TUserNotificationProfile;
  UserId: Variant;
begin

  AddRandomForReceivingPermissibleUserIdRecords(1355);
  
  UserId := 1355;
  
  ReturnValue :=
    FBasedOnDatabaseUserNotificationProfileService
      .GetNotificationProfileForUser(UserId);

  CheckNotNull(ReturnValue, 'UserNotification must not be nil');
  CheckEquals(Integer(UserId), ReturnValue.UserId, 'UserId must be ' + VarToStr(UserId));
  CheckTrue(not ReturnValue.PermissibleReceivingOwnNotificationsUserIds.IsEmpty, 'PermissibleReceivingOwnNotificationsUserIds must be non-empty');

end;

procedure TestTBasedOnDatabaseUserNotificationProfileService.
  TestGetNotificationProfileForUser_WithoutForReceivingPermissibleUsers;
var
  ReturnValue: TUserNotificationProfile;
  UserId: Variant;
begin

  UserId := 1355;
  
  ReturnValue :=
    FBasedOnDatabaseUserNotificationProfileService
      .GetNotificationProfileForUser(UserId);

  CheckNotNull(ReturnValue, 'UserNotification must not be nil');
  CheckEquals(Integer(UserId), ReturnValue.UserId, 'UserId must be ' + VarToStr(UserId));
  CheckTrue(ReturnValue.PermissibleReceivingOwnNotificationsUserIds.IsEmpty, 'PermissibleReceivingOwnNotificationsUserIds must be empty');

end;

procedure TestTBasedOnDatabaseUserNotificationProfileService.
  TestSaveNotificationProfileForUser_InvalidUserNotificationProfile_Nil;
begin

  CheckException(
    SaveNotificationProfileForUser_InvalidUserNotificationProfile_Nil,
    TUserNotificationProfileServiceException,
    'Profile = nil must raise exception'
  );

end;

procedure TestTBasedOnDatabaseUserNotificationProfileService.
  TestSaveNotificationProfileForUser_InvalidUserNotificationProfile_UserIdIsEmpty;
begin

  CheckException(
    SaveNotificationProfileForUser_InvalidUserNotificationProfile_UserIdIsEmpty,
    TUserNotificationProfileServiceException,
    'UserId = Empty of Profile must raise exception'
  );
  
end;

procedure TestTBasedOnDatabaseUserNotificationProfileService.
  TestSaveUserNotificationProfile_AddingForReceivingPermissibleUsers;
var
  UserNotificationProfile: TUserNotificationProfile;
  SavedUserNotificationProfile: TUserNotificationProfile;
begin

  UserNotificationProfile := TUserNotificationProfile.Create;

  try

    UserNotificationProfile.UserId := 1355;
    UserNotificationProfile.ReceivingNotificationsEnabled := False;
    UserNotificationProfile.AddUserForWhichReceivingOwnNotificationsPermissible(1332);
    UserNotificationProfile.AddUserForWhichReceivingOwnNotificationsPermissible(12);
    UserNotificationProfile.AddUserForWhichReceivingOwnNotificationsPermissible(1333);

    FBasedOnDatabaseUserNotificationProfileService.
      SaveUserNotificationProfile(UserNotificationProfile);

    SavedUserNotificationProfile :=
      FBasedOnDatabaseUserNotificationProfileService.
        GetNotificationProfileForUser(
          UserNotificationProfile.UserId
        );

  finally

    FreeAndNil(UserNotificationProfile);
    
  end;

end;

procedure TestTBasedOnDatabaseUserNotificationProfileService.
  TestSaveUserNotificationProfile_RemovingAllForReceivingPermissibleUsers;
var
  UserNotificationProfile: TUserNotificationProfile;
  SavedUserNotificationProfile: TUserNotificationProfile;
begin

  AddRandomForReceivingPermissibleUserIdRecords(1355);
  
  UserNotificationProfile := TUserNotificationProfile.Create;

  try

    UserNotificationProfile.UserId := 1355;
    UserNotificationProfile.ReceivingNotificationsEnabled := False;

    FBasedOnDatabaseUserNotificationProfileService.SaveUserNotificationProfile(
      UserNotificationProfile
    );

    SavedUserNotificationProfile :=
      FBasedOnDatabaseUserNotificationProfileService.
        GetNotificationProfileForUser(
          UserNotificationProfile.UserId
        );

    CheckUserNotificationProfiles(
      UserNotificationProfile, SavedUserNotificationProfile
    );
    
  finally

    FreeAndNil(UserNotificationProfile);

  end;

end;

procedure TestTBasedOnDatabaseUserNotificationProfileService.
  CheckUserNotificationProfiles(
    FirstNotificationProfiles,
    SecondUserNotificationProfiles: TUserNotificationProfile
  );
begin

  CheckEquals(
    Integer(FirstNotificationProfiles.UserId), SecondUserNotificationProfiles.UserId, 'UserIds must match'
  );

  CheckEquals(
    FirstNotificationProfiles.ReceivingNotificationsEnabled,
    SecondUserNotificationProfiles.ReceivingNotificationsEnabled, 'ReceivingNotificationsEnabled properties must match'
  );

  CheckTrue(
    FirstNotificationProfiles.PermissibleReceivingOwnNotificationsUserIds.Equals(
      SecondUserNotificationProfiles.PermissibleReceivingOwnNotificationsUserIds
    ),
    'PermissibleReceivingOwnNotificationsUserIds properties must match'
  );
    
end;

procedure TestTBasedOnDatabaseUserNotificationProfileService.RemoveAllForReceivingPermissibleUserIdRecords(
  const UserId: Variant);
begin

  CreateAndExecuteQueryWithFree(
    FConnection,
    'DELETE FROM ' + FUserNotificationProfileDbSchema.UsersForWhichPermissibleReceivingNotificationsToOthersTableName +
    ' WHERE ' + FUserNotificationProfileDbSchema.UserIdForWhichReceivingPermissibleColumnName + ' = ' + VarToStr(UserId),
    [],
    [],
    False
  );

end;

procedure TestTBasedOnDatabaseUserNotificationProfileService.
AddRandomForReceivingPermissibleUserIdRecords(
  const UserIds: TVariantList
);
begin

  CreateAndExecuteQueryWithFree(
    FConnection,
    Format(
      'INSERT INTO %s (%s, %s) VALUES ' +
      '(1332, 12), ' +
      '(1333,1357),' +
      '(1355,1357),' +
      '(1357,1662),' +
      '(1662,1160),' +
      '(1356,1160),' +
      '(1710,1160),' +
      '(1662,12),' +
      '(1333,1359),' +
      '(1333,1360),' +
      '(1332,127)',
      [
        FUserNotificationProfileDbSchema.UsersForWhichPermissibleReceivingNotificationsToOthersTableName,
        FUserNotificationProfileDbSchema.UserIdForWhichReceivingPermissibleColumnName,
        FUserNotificationProfileDbSchema.ForOtherUserReceivingUserIdColumnName
      ]
    ),
    [],
    [],
    False
  );

end;

procedure TestTBasedOnDatabaseUserNotificationProfileService.
  AddRandomForReceivingPermissibleUserIdRecords(
  const UserId: Variant);
begin

  CreateAndExecuteQueryWithFree(
    FConnection,
    ReplaceStr(
      'INSERT INTO ' + FUserNotificationProfileDbSchema.UsersForWhichPermissibleReceivingNotificationsToOthersTableName +
      '(' + FUserNotificationProfileDbSchema.UserIdForWhichReceivingPermissibleColumnName + ', ' +
      FUserNotificationProfileDbSchema.ForOtherUserReceivingUserIdColumnName + ') ' +
      'VALUES (%s, 1332), (%s, 1333), (%s, 126), (%s, 12), (%s, 1357)',
      '%s',
      VarToStr(UserId)
    ),
    [],
    [],
    False
  );

end;

procedure TestTBasedOnDatabaseUserNotificationProfileService.RemoveAllForReceivingPermissibleUserIdRecords;
begin

  CreateAndExecuteQueryWithFree(
    FConnection,
    'DELETE FROM ' + FUserNotificationProfileDbSchema.UsersForWhichPermissibleReceivingNotificationsToOthersTableName,
    [],
    [],
    False
  );
  
end;

initialization
  // Register any test cases with the test runner
  RegisterTest(TestTBasedOnDatabaseUserNotificationProfileService.Suite);
end.

